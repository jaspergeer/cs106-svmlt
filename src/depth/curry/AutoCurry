## Demonstration for Automatic Currying

Module 7

Curried functions [5 points]. You implement automatic currying as described in 
the handout on understanding procedure calls.

Here, we introduce Haskell/ML-style automatic currying to eScheme.

There are two primary components to our system: partial application and the
handling of extra parameters.

At a glance, when a function is applied to too few arguments, they are captured
in its closure. When a function is applied to too many arguments, the extra
arguments are stored as a continuation on the callstack.

Perhaps our most significant (and controversial) change is unifying all
callable objects under the VM closure. Three fields are added to the closure:
`arity`, `base`, and `args`. The `arity` of a closure is the number of
additional arguments that must be supplied to it before we may call its
VM function. `args` is a VM block storing any arguments that have already
been passed to the closure, and `base` points to a copy of the closure
without any stored arguments.

