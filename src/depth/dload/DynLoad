### Dynamic Loading

Dynamic compilation and loading [2 points].

We introduce the `use` syntactic form to eScheme and vScheme, which
calls the compiler to compile a specified file, loads the code into a
function in the SVM, and calls the function for its side effects.

To do so, we introduce two new SVM instrutions: `popen` and `dload`.
`popen`, given a register and list of symbols, creates a new process with the
command specified by interpreting those symbols as tokens and opens a pipe
between the new process and the SVM. It then places the file descriptor for
the read end of the pipe in the register.

`dload`, given a destination register and a register containing a file
descriptor, reads from the associated file, passing its contents to the loader.
The resulting VM function is wrapped in a closure and placed in the destination
register.

Both `popen` and `dload` become register-setting primitives in the UFT.

Using these new primitives, we define `use` as a function in the initial basis.

```
(define use (filename)
  (let* ([cmd (cons '${BIN_DIR}/uft (cons 'es-vo (cons filename '())))]
         [fd (popen cmd)]
         [module (dload fd)])
         (module)))
```

We have added to the SVM `main` function, code that captures the path to the
directory the `svm` binary is located in. It then sets the `BIN_DIR`
environment variable to this path.

Assuming that the `uft` and `svm` binaries are located in the same directory,
this allows `popen` is to call the compiler, open a pipe, and get the file
descriptor. `dload` is then used to produce a VM closure from the file, and
the function, `module`, is called for its side effects.

Because `module` is treated like any other function, we retain the guarantees
of our calling convention. Namely, that dynamically loading code will not
scribble over any live registers.

This on its own is fine if we are okay with `use` as an expression,
but Î¼Scheme only allows it as a definition form. Thus, we have made `use` a
reserved keyword, preventing it from being referenced as a global.
We add an addition syntactic form in vScheme (Use Name), which is desugared
into a call to function `use` during disambiguation.

We provide 3 examples in this directory. They can all be run using the provided
`runtests.sh` script. This script pre-compiles `use.scm` and loads it prior
to each of the three tests so none have to define `use` themselves.

`dload.scm` is a sanity check. It defines a function which we expect to be
overwritten by loadins `loadme.scm`. It then loads `stress.scm`, which declares
100 new global variables, to ensure that the garbage collection issues we
had in the past are gone. It then loads `loadme.scm` and verifies that the
function has been successfully overwritten.

`good.scm` is a slightly larger test, loading `goodload.scm` which contains
predefined functions like `filter` and `map`. It then checks that these
functions execute without issue. Note the curried `=` on line 13.

Our largest test is `scheme105e.scm`. This is a slightly modified version of
Alex's CS105 HW3 submission which gets the scheme initial basis by dynamically
loading `predef.scm`.
