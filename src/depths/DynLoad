demonstration for dynamic loading

Module 2:

Dynamic compilation and loading [2 points]. 
Î¼Scheme and vScheme both have a use syntactic form, which tells the interpreter
to load and run code. This goal is to implement two machine instructions, 
one to call popen and read from a pipe, and one to load a list of modules 
from an open file descriptor. These two instructions can then eventually 
be used to call the compiler and load the results. 
These instructions can be tested now, and then by the time of module 4, 
they can be used to implement a use function.

https://github.com/jaspergeer/cs106-svmlt/commit/78836c29d26a0247c0b3e4b81bb4e228724ea79e#diff-8761bb5eb33c13ee4b7b3ecbbadc1392ccc674dab6f84ab43fb33912ffbb48c9


- Changes

In SVM:

Two new VM opcode: PipeOpen and DynLoad

pipeOpen is a unary operator "$rX := popen $rY" that puts the file descriptor
of file rY (represented by a VMString)

PipeOpen read in the file descriptor from the command string (a VMValue that
is a string) and embed the descriptor as a VMValue
(number).

DynLoad opens the file, load the module

In UFT:

new primitive


- Demonstration on the example

(we need an initial basis for use)